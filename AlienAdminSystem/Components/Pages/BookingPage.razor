@inject BookingDatabaseService BookingDatabaseService
@inject AlienDBContext AlienDBContext
@inject AlienDatabaseService AlienDatabaseService
@inject NotificationManager NotificationManager
@inject NavigationManager NavigationManager
@inject BookingApprovalService BookingApprovalService
@using CommunityToolkit.Maui.Alerts;
@using CommunityToolkit.Maui.Core;
@using Microsoft.EntityFrameworkCore;

@page "/booking"


<EditForm Model="@BookingRequest" OnValidSubmit="SubmitBooking">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container">
		<div class="top-row mb-3">
			<h3>Booking</h3>
			<div class="col-md-6">
				<div class="col-md-6">
					<label class="form-label">Enter Visitors: </label>
					<InputNumber type="number" class="form-control" @bind-Value="BookingRequest.NumberOfVisitors" />
					<ValidationMessage For="@(() => BookingRequest.NumberOfVisitors)" />
				</div>
			</div>
			<div class="col-md-6">
				<label for="facilities" class="form-label">Select Facility: </label>
				<InputSelect class="form-select" @bind-Value="BookingRequest.FacilityID">
					<option value="0">Select the option</option>
					@foreach (var facilit in Facilities)
					{
						<option value="@facilit.ID">@facilit.Name - Status: @facilit.Status</option>
					}
				</InputSelect>
				<ValidationMessage For="@(() => BookingRequest.FacilityID)" />
			</div>
		</div>
		<div class="row mb-3">
			@if (AlienViewModel == null || !AlienViewModel.Any())
			{
				<p>Loading Aliens....</p>
			}
			else
			{
				foreach (var alien in AlienViewModel)
				{
					<div class="form-check">
						<input type="checkbox" class="form-check-input" id="@alien.ID" @bind="alien.IsSelected" />
						<label class="form-check-label" for="@alien.ID">@alien.FirstName @alien.LastName</label>
					</div>
				}
			}
		</div>
		<div class="row mb-3">
			<div class="col-md-6">
				<div>
					<label class="form-label" for="startTime">Start Time: </label>
					<input type="time" class="form-control" @bind="BookingRequest.StartTime" />
				</div>
			</div>
			<div class="col-md-6">
				<div>
					<label class="form-label" for="endTime">End Time: </label>
					<input type="time" class="form-control" @bind="BookingRequest.EndTime" />
				</div>
			</div>
		</div>

		<button type="submit" class="btn btn-primary mt-3">Register Alien</button>
		<div class="row">
			<p>
				@if (!string.IsNullOrEmpty(ErrorMessage))
				{
					<div class="alert alert-danger mt-3">
						@ErrorMessage
					</div>
				}
			</p>
		</div>
	</div>
</EditForm>

@code {

	// Cascading parameters are used to pass data down the component tree
	[CascadingParameter]
	internal SessionState? SessionState { get; set; }

	List<Facility> Facilities { get; set; } = new();

	List<AlienViewModel> AlienViewModel { get; set; } = new();

	public Booking BookingRequest { get; set; } = new Booking();

	public DateTime BookingDate { get; set; } = DateTime.Today;

	public string ErrorMessage = String.Empty;

	public ValidationResult? ValidationResult { get; set; }

	protected override async Task OnInitializedAsync()
	{
		if (SessionState == null || SessionState.LoggedInUser == null)
		{
			throw new Exception("Session state or logged-in user is null");
		}

		// Check if the logged-in user exists in the database
		var userExists = await AlienDBContext.Users.AnyAsync(a => a.ID == SessionState.LoggedInUser.ID);

		if (!userExists)
		{
			throw new Exception("Alien not found");
		}

		// Fetch the list of facilities from the database
		Facilities = await AlienDBContext.Facilities.ToListAsync();

		// Fetch the list of Aliens from the database
		var aliensFromDb = await AlienDBContext.Aliens.ToListAsync();

		// Map the Aliens to the ViewModel
		AlienViewModel = aliensFromDb.Select(a => new AlienViewModel
			{
				ID = a.ID,
				FirstName = a.FirstName,
				LastName = a.LastName,
				IsSelected = false
			}).ToList();

	}

	public async Task SubmitBooking()
	{

		foreach (var vm in AlienViewModel.Where(a => a.IsSelected))
		{
			// Find Alien IDs where IsSelected is true
			var existingAlien = await AlienDBContext.Aliens.FindAsync(vm.ID);

			if (existingAlien != null)
			{
				if (AlienDBContext.Entry(existingAlien).State == EntityState.Detached)
				{
					// Attach the entity to the context if it's detached
					AlienDBContext.Attach(existingAlien);
				}

				BookingRequest?.Aliens?.Add(existingAlien);
			}
		}

		// Check if the SessionState and LoggedInUser are not null
		if (SessionState != null && SessionState.LoggedInUser != null)
		{
			// Check if the BookingRequest.UserID is null
			if (BookingRequest?.UserID == null)
				throw new Exception("BookingRequest.User is null");

			// Assign the logged-in user's ID to the BookingRequest
			BookingRequest.UserID = SessionState.LoggedInUser.ID;

		}

		try
		{
			if (BookingRequest != null)
			{
				BookingRequest.BookingApprovalID = 1;

				var selectedFacility = await AlienDBContext.Facilities.FirstOrDefaultAsync(f => f.ID == BookingRequest.FacilityID);

				if (selectedFacility == null)
				{
					throw new Exception("Facility not found");
				}

				if (selectedFacility.Status == FacilityStatus.UnderMaintenance)
				{
					ErrorMessage = "Facility is not open";
					return;
				}
				ValidationResult = selectedFacility.ValidateBooking(BookingRequest);

				if (!ValidationResult.IsValid && ValidationResult.Message != null)
				{


					ErrorMessage = ValidationResult.Message;
					return;
				}

				ErrorMessage = "Booking is valid";
			}
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
			return;
		}

		// Check if the BookingRequest is null
		if (BookingRequest == null)
		{
			throw new Exception("BookingRequest is null");
		}
		var message = new NotificationMessage
			{
				Title = "Booking Confirmation",
				Content = $"Booking {BookingRequest.ID} for {BookingRequest.NumberOfVisitors} visitors has been successfully created.",
			};

		if (message == null || NotificationManager == null)
		{
			return;
		}

		await NotificationManager.NotifyAsync(message);

		// Insert Booking into the database
		await BookingDatabaseService.InsertBookingAsync(BookingRequest);

		try
		{
			await InsertApproval(BookingRequest);
		}
		catch (Exception ex)
		{
			ErrorMessage = ex.Message;
			return;
		}


		NavigationManager.NavigateTo("/bookingsuccess");
	}

	private async Task InsertApproval(Booking bookingRequest)
	{
		BookingApproval approval;

		if (bookingRequest.BookingApprovalID == 2) // PendingApproval
		{
			approval = new BookingApproval
				{
					ApprovalStatus = (BookingStatus.Status)bookingRequest.ApprovalStatusID,
					TimeStamp = DateTime.Now,
					IsApproved = false
				};
		}
		else if (bookingRequest.BookingApprovalID == 1) // AutoApproved
		{
			approval = new BookingApproval
				{
					ApprovalStatus = (BookingStatus.Status)bookingRequest.ApprovalStatusID,
					TimeStamp = DateTime.Now,
					IsApproved = true
				};
		}
		else if (bookingRequest.BookingApprovalID == 3) // Rejected
		{
			approval = new BookingApproval
				{
					ApprovalStatus = (BookingStatus.Status)bookingRequest.ApprovalStatusID,
					TimeStamp = DateTime.Now,
					IsApproved = false
				};
		}
		else
		{
			// For unexpected status, treat as Rejected.
			approval = new BookingApproval
				{
					ApprovalStatus = (BookingStatus.Status)bookingRequest.ApprovalStatusID,
					TimeStamp = DateTime.Now,
					IsApproved = false
				};
		}

		BookingRequest.BookingApproval = approval; // Set the BookingApproval navigation property

		await BookingApprovalService.InsertBookingApprovalAsync(approval);
	}
}