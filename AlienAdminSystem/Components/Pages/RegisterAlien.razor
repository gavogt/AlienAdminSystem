@page "/registeraliens"

@using System.ComponentModel.DataAnnotations
@using System.Collections.Generic
@using Microsoft.Data.SqlClient
@using Microsoft.Extensions.Configuration
@using System.Threading.Tasks
@using Microsoft.EntityFrameworkCore
@inject AlienDatabaseService AlienDatabaseService
@inject NavigationManager Navigation
@inject NotificationManager NotificationManager
@inject AlienDBContext AlienDBContext

<EditForm Model="@AlienInput" OnValidSubmit="RegisterMyAlien">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container" style="max-width: 900px; margin: auto;">
		<div class="row">
			<div class="col-md-4 mb-3">
				<div class="card h-100 shadow">
					<img src="images/alien1.jpg" alt="Alien Registration" class="card-img-top img-fluid" />
					<div class="card-body">
						<p class="card-text">
							After registering on our platform, Alien Zorath embarked on a distinguished visit to the Stellar Harmony Embassy. 
							Within its grand halls and modern architecture, Zorath experienced a welcoming, high-tech environment. 
							The embassy’s VIP suites, holographic briefing rooms, and secure data vaults provided exceptional comfort
							and enabled meaningful interstellar dialogue—highlighting its vital role in fostering mutual understanding
							and shared prosperity across the cosmos. 
						</p>
					</div>
				</div>
			</div>

			<div class="col-md-8">
				<div class="card shadow">
					<div class="card-body">

						<!-- Row 1: Title, First Name, Last Name -->
						<div class="row mb-3">
							<h1>Alien Registration Form</h1>
							<p>Please fill out the details below to register your alien with the Galactic Administration.</p>
							<div class="col-md-6">
								<div>
									<label class="form-label">
										<i class="bi bi-person-fill"></i>
										Enter first name:
									</label>
									<InputText placeholder="John" type="text" class="form-control" @bind-Value="AlienInput.FirstName" />
									<ValidationMessage For="@(() => AlienInput.FirstName)" />
								</div>
							</div>
							<div class="col-md-6">
								<div>
									<label class="form-label">
										<i class="bi bi-person-fill"></i>
										Enter last name:
									</label>
									<InputText placeholder="Smith" type="text" class="form-control" @bind-Value="AlienInput.LastName" />
									<ValidationMessage For="@(() => AlienInput.LastName)" />
								</div>
							</div>
						</div>

						<!-- Row 2: Age and Additional Months -->
						<div class="row mb-3">
							<div class="col-md-6">
								<label class="form-label">Enter age: </label>
								<InputNumber type="number" class="form-control" @bind-Value="AlienInput.Age" />
								<ValidationMessage For="@(() => AlienInput.Age)" />
							</div>
							<div class="col-md-6">
								<label for="visitMonths" class="form-label">Additional months: </label>
								<InputNumber id="visitMonths" class="form-control" @bind-Value="AlienInput.VisitDurationMonths" Min="0" Max="12" />
								<ValidationMessage For="@(() => AlienInput.VisitDurationMonths)" />
							</div>
						</div>

						<!-- Row 3: Species and Planet -->
						<div class="row mb-3">
							<div class="col-md-6">
								<div>
									<label class="form-label">Enter species: </label>
									<InputSelect class="form-select" @bind-Value="AlienInput.Species">
										@foreach (var species in Enum.GetValues(typeof(Species)))
										{
											<option value="@species">@species</option>
										}
									</InputSelect>
									<ValidationMessage For="@(() => AlienInput.Species)" />
								</div>
							</div>
							<div class="col-md-6">
								<div>
									<label class="form-label">Enter planet: </label>
									<InputText placeholder="Mars" type="text" class="form-control" @bind-Value="AlienInput.Planet" />
									<ValidationMessage For="@(() => AlienInput.Planet)" />
								</div>
							</div>
						</div>

						<!-- Row 4: Alien Group and Atmosphere -->
						<div class="row mb-3">
							<div class="col-md-6">
								<label for="aliengroup" class="form-label">Select Alien Group: </label>
								<InputSelect class="form-select" @bind-Value="AlienInput.AlienGroupID">
									<option value="0">-- Select an option --</option>
									@foreach (var group in AlienGroupList)
									{
										<option value="@group.ID">@group.Name</option>
									}
								</InputSelect>
								<ValidationMessage For="@(() => AlienInput.AlienGroupID)" />
							</div>
							<div class="col-md-6">
								<label for="atmosphereType" class="form-label">Select Atmosphere: </label>
								<InputSelect id="atmosphereType" class="form-select" @bind-Value="AlienInput.AtmosphereTypeID">
									<option value="">-- Select an Atmosphere --</option>
									@foreach (var atmosphere in AtmosphereTypeList)
									{
										<option value="@atmosphere.ID">@atmosphere.Name</option>
									}
								</InputSelect>
								<ValidationMessage For="@(() => AlienInput.AtmosphereTypeID)" />
							</div>
						</div>

						<!-- Row 5: Special Requirements -->
						<div class="row mb-3">
							<div class="col-12">
								<label for="specialRequirements" class="form-label">Special Requirements: </label>
								<textarea id="specialRequirements" class="form-control" rows="4" @bind="AlienInput.SpecialRequirements"></textarea>
								<ValidationMessage For="@(() => AlienInput.SpecialRequirements)" />
							</div>
						</div>

						<!-- Row 6: Email -->
						<div class="row mb-3">
							<div class="col-12">
								<label class="form-label">
									<i class="bi bi-envelope-fill"></i>
									Enter email:
								</label>
								<InputText placeholder="Alien@alien.com" type="email" class="form-control" @bind-Value="AlienInput.Email" />
								<ValidationMessage For="@(() => AlienInput.Email)" />
							</div>
						</div>
						<button type="submit" class="btn btn-primary mt-3">Register Alien</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</EditForm>

@code {
	private AlienInputModel AlienInput = new();
	private List<AlienGroup> AlienGroupList = new();
	private List<AtmosphereType> AtmosphereTypeList = new();

	protected override async Task OnInitializedAsync()
	{
		try
		{
			// Fetch the Alien Groups from the database
			AlienGroupList = await AlienDBContext.AlienGroups.ToListAsync();

			// Fetch the Atmosphere Types from the database
			AtmosphereTypeList = await AlienDBContext.AtmosphereTypes.ToListAsync();
		}
		catch (Exception ex)
		{
			// Handle the error as needed
			Console.WriteLine($"Error fetching Alien Groups: {ex.Message}");
		}
	}

	private async Task RegisterMyAlien()
	{
		var newAlien = AlienFactory.CreateAlien(
		AlienInput.FirstName,
		AlienInput.LastName,
		AlienInput.Planet,
		AlienInput.Species,
		AlienInput.Email,
		AlienInput.Age,
		AlienInput.AlienGroupID,
		AlienInput.AtmosphereTypeID,
		AlienInput.VisitDurationMonths,
		AlienInput.SpecialRequirements
		);

		try
		{
			await AlienDatabaseService.InsertAlienAsync(newAlien);

			// Check if the Alien input is null
			if (AlienInput == null)
			{
				throw new Exception("Alien is null");
			}
			var message = new NotificationMessage
				{
					Title = "Alien Registered",
					Content = $"Alien named: {AlienInput.FirstName}{AlienInput.LastName} from planet: {AlienInput.Planet} has been successfully registered.",
				};

			if (message == null || NotificationManager == null)
			{
				throw new Exception("Message or Notification Manager is null");

			}

			await NotificationManager.NotifyAsync(message);

			Navigation.NavigateTo("/booking");
		}
		catch
		{
			throw new Exception("Error inserting alien into the database.");
		}
	}
}