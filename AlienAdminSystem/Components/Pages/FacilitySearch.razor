@page "/facilitySearch"
@inject FacilityFilterService FacilityFilterService

<div class="container mt-4 p-4 bg-dark rounded shadow-sm">
	<div class="row">
		<div class="col-md-6 mb-3">
			<div class="form-group">
				<label>Minimum Capacity:</label><br />
				<input type="number" @bind="_minCapacity" placeholder="Enter minimum Capacity: " />
			</div>
		</div>
		<div class="col-md-6 mb-3">
			<div class="form-group">
				<label>Required Atmosphere Type ID for Embassies:</label><br />
				<input type="number" @bind="_requiredAtmosphere" placeholder="Enter Atmosphere Type ID: " />
			</div>
		</div>
	</div>
	<div class="row mb-3">
		<div class="col-md-6 mb-3">
			<div class="form-group">
				<label>Required Lab Equipment Count:</label><br />
				<input type="number" @bind="_requiredLabEquipmentCount" placeholder="Enter Lab Equipment Count: " />
			</div>
		</div>
	</div>
	<button @onclick="SearchFacilities">Search</button>

	<div class="search">
		@if (_facilities != null)
		{
			if (_facilities.Any())
			{
				<h4>Results</h4>
				<ul>
					@foreach (var facility in _facilities)
					{
						if (facility?.AtmosphereType?.Name != null)
						{
							<li>
								<strong>@facility.Name</strong> - Capacity: [@facility.Capacity] - Atmosphere ID: [@facility.AtmosphereType.ID] Type: [@facility.AtmosphereType.Name]
							</li>

						}

						var lab = facility as AlienAdminSystem.ResearchLab;
						if (lab != null)
						{
							<li>Lab Equipment Count: @lab.LabEquipmentCount</li>
						}
					}
				</ul>
			}
		}
	</div>
</div>
@code {
	private int _minCapacity { get; set; }
	private int _requiredAtmosphere { get; set; }
	private List<Facility> _facilities { get; set; } = new();
	private int _facilityTypeID { get; set; }
	private int _requiredLabEquipmentCount { get; set; }

	private async Task SearchFacilities()
	{
		var strategies = new List<IFacilityFilterStrategy>();

		if (_minCapacity > 0)
		{   // Add a new CapacityFilterStrategy to the strategies list
			// Query by min capacity
			strategies.Add(new CapacityFilterStrategy(_minCapacity));
		}

		if (_requiredAtmosphere > 0)
		{
			// Add a new EmbassyAtmosphereFilterStrategy to the strategies list
			// Query by required atmosphere
			strategies.Add(new EmbassyAtmosphereFilterStrategy(_requiredAtmosphere));

		}

		if (_requiredLabEquipmentCount > 0)
		{
			// Add a new ResearchLabFilterStrategy to the strategies list
			// Query by required lab equipment count
			strategies.Add(new ResearchLabFilterStrategy(_requiredLabEquipmentCount));
		}

		_facilities = await FacilityFilterService.GetFilteredFacilitiesAsync(strategies);
	}
}


