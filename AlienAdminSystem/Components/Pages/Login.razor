@using Microsoft.EntityFrameworkCore;
@inject NavigationManager Navigation
@inject AlienDBContext dbContext

@page "/login"

<EditForm model="@LoginModel" OnSubmit="HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container mt-5">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<div class="card shadow">
					<div class="card-body">
						<h3>Alien Login Page</h3>
						<div class="row">
							<div class="col-md-6">
	
								<div class="mb-3">
									<label for="username" class="form-label">Enter username: </label>
									<InputText id="username" type="text" class="form-control" @bind-value="LoginModel.Username" />
									<ValidationMessage For="@(() => LoginModel.Username)" />
								</div>
							</div>
							<div class="col-md-6">
								<div class="mb-3">
									<label for="password" class="form-label">Enter password: </label>
									<InputText id="password" type="password" class="form-control" @bind-value="LoginModel.Password" />
									<ValidationMessage For="@(() => LoginModel.Password)" />
								</div>
							</div>
						</div>
						<button type="submit" class="btn btn-primary">Login</button>
					</div>
				</div>
			</div>
		</div>
		@if (!string.IsNullOrEmpty(LoginMessage))
		{
			<div class="alert alert-danger mt-3">
				@LoginMessage
			</div>
		}
	</div>
</EditForm>
@code {

	// Cascading parameters are used to pass data down the component tree
	[CascadingParameter]
	internal SessionState? SessionState { get; set; }

	LoginModel LoginModel = new LoginModel();
	private string LoginMessage = String.Empty;

	// This method is called when the form is submitted
	private async Task HandleSubmit()
	{
		try
		{
			// Check if the user exists
			var user = await dbContext.Users
				.FirstOrDefaultAsync(u => u.Username == LoginModel.Username);

			if (user == null)
			{
				LoginMessage = "Invalid username or password.";
				return;
			}

			// Verify the password
			bool isValid = BCrypt.Net.BCrypt.Verify(LoginModel.Password, user.HashedPassword);

			if (isValid)
			{
				// Assign the logged-in user to the session state
				if (SessionState != null)
					SessionState.LoggedInUser = user;

				LoginMessage = "Login successful!";

				if (SessionState?.LoggedInUser?.IsAdmin == false)
				{
					// Redirect to the dashboard page
					if (SessionState?.LoggedInUser.Species == Species.Reptilian)
					{
						Navigation.NavigateTo("/reptilianDashboard");
					}
					else if (SessionState?.LoggedInUser?.Species == Species.TimeTraveler)
					{
						Navigation.NavigateTo("/timetravelerDashboard");
					}
					else if (SessionState?.LoggedInUser?.Species == Species.Grey)
					{
						Navigation.NavigateTo("/greyDashboard");
					}
					else if (SessionState?.LoggedInUser?.Species == Species.Hybrid)
					{
						Navigation.NavigateTo("/hybridDashboard");
					}
					else
					{
						Navigation.NavigateTo("/dashboard");
					}


					return;
				}
				else if (SessionState?.LoggedInUser?.IsAdmin == true)
				{
					// Redirect to the admin page
					Navigation.NavigateTo("/adminDashboard");
					return;
				}

			}
			else
			{
				LoginMessage = "Invalid username or password.";
				return;
			}
		}
		catch (Exception e)
		{
			// Android breaks due to connection string on local and android
			LoginMessage = $"An error occurred during login.\n {e.Message}";
		}
	}
}
