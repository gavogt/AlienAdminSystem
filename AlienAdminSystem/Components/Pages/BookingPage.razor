@inject BookingDatabaseService BookingDatabaseService
@inject AlienDBContext AlienDBContext
@using Microsoft.EntityFrameworkCore;

@page "/booking"


<EditForm Model="@BookingRequest" OnValidSubmit="SubmitBooking">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container">
		<div class="top-row mb-3">
			<h3>Booking</h3>
			<div class="col-md-6">
				<div class="col-md-6">
					<label class="form-label">Enter Visitors: </label>
					<InputNumber type="number" class="form-control" @bind-Value="BookingRequest.NumberOfVisitors" />
					<ValidationMessage For="@(() => BookingRequest.NumberOfVisitors)" />
				</div>
			</div>
			<div class="col-md-6">
				<label for="facilities" class="form-label">Select Facility: </label>
				<InputSelect class="form-select" @bind-Value="BookingRequest.FacilityID">
					<option value="0">Select the option</option>
					@foreach (var facilit in Facilities)
					{
						<option value="@facilit.ID">@facilit.Name - Status: @facilit.Status</option>
					}
				</InputSelect>
				<ValidationMessage For="@(() => BookingRequest.FacilityID)" />
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-md-6">
				<div>
					<label class="form-label" for="startTime">Start Time: </label>
					<input type="time" class="form-control" @bind="BookingRequest.StartTime" />
				</div>
			</div>
			<div class="col-md-6">
				<div>
					<label class="form-label" for="endTime">End Time: </label>
					<input type="time" class="form-control" @bind="BookingRequest.EndTime" />
				</div>
			</div>
		</div>

		<button type="submit" class="btn btn-primary mt-3">Register Alien</button>
		<div class="row">
			<p>
				@if (!string.IsNullOrEmpty(ErrorMessage))
				{
					<div class="alert alert-danger mt-3">
						@ErrorMessage
					</div>
				}
			</p>
		</div>
	</div>
</EditForm>

@code {

	// Cascading parameters are used to pass data down the component tree
	[CascadingParameter]
	internal SessionState? SessionState { get; set; }

	List<Facility> Facilities { get; set; } = new();

	public Booking BookingRequest { get; set; } = new Booking();

	public DateTime BookingDate { get; set; } = DateTime.Today;

	public string ErrorMessage = String.Empty;

	protected override async Task OnInitializedAsync()
	{
		if (SessionState == null || SessionState.LoggedInUser == null)
		{
			throw new Exception("Session state or logged-in user is null");
		}
		var alienExists = await AlienDBContext.Users.AnyAsync(a => a.ID == SessionState.LoggedInUser.ID);
		if (!alienExists)
		{
			throw new Exception("Alien not found");
		}
		// Fetch the list of facilities from the database
		Facilities = await AlienDBContext.Facilities.ToListAsync();
	}

	public async Task SubmitBooking()
	{

		if (SessionState != null && SessionState.LoggedInUser != null)
		{
			BookingRequest.AlienID = SessionState.LoggedInUser.ID;

		}

		await BookingDatabaseService.InsertBookingAsync(BookingRequest);
	}

}