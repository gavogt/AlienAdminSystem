@using Microsoft.EntityFrameworkCore;
@inject NavigationManager Navigation
@inject UserDBContext dbContext
@inject SessionState SessionState

@page "/login"

<EditForm model="@LoginModel" OnSubmit="HandleSubmit">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div class="container mt-5">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<h3>Alien Login Page</h3>
				<div class="mb-3">
					<label for="username" class="form-label">Enter username: </label>
					<InputText id="username" type="text" class="form-control" @bind-value="LoginModel.Username" />
					<ValidationMessage For="@(() => LoginModel.Username)" />
				</div>

				<div class="mb-3">
					<label for="password" class="form-label">Enter password: </label>
					<InputText id="password" type="password" class="form-control" @bind-value="LoginModel.Password" />
					<ValidationMessage For="@(() => LoginModel.Password)" />
				</div>
				<button type="submit" class="btn btn-primary">Login</button>
			</div>
		</div>
		@if (!string.IsNullOrEmpty(LoginMessage))
		{
			<div class="alert alert-danger mt-3">
				@LoginMessage
			</div>
		}
	</div>
</EditForm>
@code {

	LoginModel LoginModel = new LoginModel();
	private string LoginMessage = String.Empty;


	private async Task HandleSubmit()
	{
		try
		{
			// Check if the user exists
			var users = await dbContext.Users
				.FirstOrDefaultAsync(u => u.Username == LoginModel.Username);

			// Retrieve the hashed password
			var hashedPassword = await dbContext.Users
				.Where(u => u.Username == LoginModel.Username)
				.Select(u => u.HashedPassword)
				.FirstOrDefaultAsync();

			if (users == null)
			{
				LoginMessage = "Invalid username or password.";
				return;
			}

			// Verify the password
			bool isValid = BCrypt.Net.BCrypt.Verify(LoginModel.Password, hashedPassword);

			if (isValid)
			{
				// Assign the logged-in user to the session state
				SessionState.LoggedInUser = users;

				// Redirect
				LoginMessage = "Login successful!";
				Navigation.NavigateTo("/dashboard");
				return;
			}
			else
			{
				LoginMessage = "Invalid username or password.";
				return;
			}
		}
		catch (Exception e)
		{
			// Android breaks due to connection string on local and android
			LoginMessage = $"An error occurred during login.\n {e.Message}";
		}
	}
}
