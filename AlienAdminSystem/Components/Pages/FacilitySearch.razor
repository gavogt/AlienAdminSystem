@page "/facilitySearch"
@inject FacilityFilterService FacilityFilterService

<div class="container mt-4" style="max-width: 700px;">
	<div class="card shadow-sm">
		<div class="card-header bg-primary text-white">
			<h4 class="mb-0">Search Facilities</h4>
		</div>
		<div class="card-body">
			<div class="row">
				<div class="col-md-6 mb-3">
					<label class="form-label">Minimum Capacity:</label>
					<input class="form-control" type="number" @bind="_minCapacity" placeholder="Enter minimum Capacity: " />
				</div>
				<div class="col-md-6 mb-3">
					<label class="form-label">Atmosphere ID for Embassies:</label>
					<input class="form-control" type="number" @bind="_requiredAtmosphere" placeholder="Enter Atmosphere Type ID: " />
				</div>
			</div>
			<div class="row mb-3">
				<div class="col-md-6 mb-3">
					<label class="form-label">Required Lab Equipment Count:</label>
					<input class="form-control" type="number" @bind="_requiredLabEquipmentCount" placeholder="Enter Lab Equipment Count: " />
				</div>
				<div class="col-md-6 d-flex align-items-end justify-content-end">
					<button class="btn btn-primary" @onclick="SearchFacilities">Search</button>
				</div>
			</div>
		</div>

		<div class="search">
			@if (_facilities != null)
			{
				@if (_facilities.Any())
				{
					<h5 class="mt-4 ms-3">Results</h5>
					<ul class="list-group">
						@foreach (var facility in _facilities)
						{
							<li class="list-group-item">
								<strong>@facility.Name:</strong> 
								<br />
								Capacity: @facility.Capacity
								@if (facility?.AtmosphereType?.Name != null)
								{
									<br />
									<span>Atmosphere Type: @facility.AtmosphereType.Name</span>

								}

								@{
									var lab = facility as AlienAdminSystem.ResearchLab;
								}
								@if (lab != null)
								{
									<br />
									<span>Lab Equipment Count: @lab.LabEquipmentCount</span>
								}
							</li>
						}
					</ul>
				}
			}
		</div>
	</div>
</div>
@code {
	private int _minCapacity { get; set; }
	private int _requiredAtmosphere { get; set; }
	private List<Facility> _facilities { get; set; } = new();
	private int _facilityTypeID { get; set; }
	private int _requiredLabEquipmentCount { get; set; }

	private async Task SearchFacilities()
	{
		var strategies = new List<IFacilityFilterStrategy>();

		if (_minCapacity > 0)
		{   // Add a new CapacityFilterStrategy to the strategies list
			// Query by min capacity
			strategies.Add(new CapacityFilterStrategy(_minCapacity));
		}

		if (_requiredAtmosphere > 0)
		{
			// Add a new EmbassyAtmosphereFilterStrategy to the strategies list
			// Query by required atmosphere
			strategies.Add(new EmbassyAtmosphereFilterStrategy(_requiredAtmosphere));

		}

		if (_requiredLabEquipmentCount > 0)
		{
			// Add a new ResearchLabFilterStrategy to the strategies list
			// Query by required lab equipment count
			strategies.Add(new ResearchLabFilterStrategy(_requiredLabEquipmentCount));
		}

		_facilities = await FacilityFilterService.GetFilteredFacilitiesAsync(strategies);
	}
}


